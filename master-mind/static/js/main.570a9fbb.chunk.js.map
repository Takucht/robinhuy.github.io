{"version":3,"sources":["components/KeyPegs.js","components/CodePegs.js","components/ChooseCodePegs.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["KeyPegs","props","keys","numberOfPegsInRow","rowIndex","gridItem","i","index","push","react_default","a","createElement","Grid","item","xs","key","CheckCircleOutline","SwapHorizontalCircleOutlined","PanoramaFishEye","container","spacing","CodePegs","rows","currentPeg","codePegs","_loop","ListItemIcon","className","onClick","onChangePeg","Lens","fontSize","style","color","ChooseCodePegs","Paper","colors","map","onChooseColor","onSubmit","Board","numberOfRows","currentRow","board","ListItem","ListItemAvatar","Divider","List","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_generateRandomCodes","_this$state","state","codes","Math","floor","random","length","_initGame","_this$state2","setState","Array","fill","openDialog","_onChooseColor","_this$state3","newRows","from","_onChangePeg","_this$state4","startIndex","_onSubmit","_this$state5","newCodes","newKeys","numberOfBlackPegs","numberOfWhitePegs","indexOfPeg","indexOf","dialogTitle","dialogContentText","_handleCloseDialog","_restartGame","body","document","html","documentElement","scrollTop","Container","maxWidth","AppBar","position","Typography","variant","component","align","assign","Dialog","open","fullWidth","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","autoFocus","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.570a9fbb.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { SwapHorizontalCircleOutlined, CheckCircleOutline, PanoramaFishEye } from '@material-ui/icons';\n\nexport default function KeyPegs(props) {\n  const { keys, numberOfPegsInRow, rowIndex } = props;\n  let gridItem = [];\n\n  for (let i = 0; i < props.numberOfPegsInRow; i++) {\n    const index = rowIndex * numberOfPegsInRow + i;\n\n    gridItem.push(\n      <Grid item xs={6} key={i}>\n        {keys[index] === 'black' ? (\n          <CheckCircleOutline />\n        ) : keys[index] === 'white' ? (\n          <SwapHorizontalCircleOutlined />\n        ) : (\n              <PanoramaFishEye />\n            )}\n      </Grid>\n    )\n  }\n\n  return (\n    <Grid container spacing={2}>\n      {gridItem}\n    </Grid>\n  );\n}","import React from 'react';\nimport { ListItemIcon } from '@material-ui/core';\nimport { Lens } from '@material-ui/icons';\n\nexport default function CodePegs(props) {\n  const { numberOfPegsInRow, rows, rowIndex, currentPeg } = props;\n  let codePegs = [];\n\n  for (let i = 0; i < numberOfPegsInRow; i++) {\n    const index = rowIndex * numberOfPegsInRow + i;\n\n    codePegs.push(\n      <ListItemIcon\n        key={i}\n        className={currentPeg === index ? \"Peg--active\" : \"\"}\n        onClick={() => props.onChangePeg(index)}>\n        <Lens fontSize=\"large\" style={{ color: rows[index] }} />\n      </ListItemIcon>\n    );\n  }\n\n  return codePegs;\n}","import React from 'react';\nimport { Grid, Paper } from '@material-ui/core';\nimport { Lens } from '@material-ui/icons';\n\nexport default function ChooseCodePegs(props) {\n  return (\n    <Paper>\n      <Grid container spacing={3}>\n        {props.colors.map(color =>\n          <Grid item xs={4} key={color}>\n            <Lens style={{ fontSize: '2.5em', color: color }} onClick={() => props.onChooseColor(color)} />\n          </Grid>\n        )}\n      </Grid>\n\n      <button onClick={props.onSubmit}>Submit</button>\n    </Paper>\n  );\n}","import React from 'react';\nimport { List, ListItem, ListItemAvatar, Divider } from '@material-ui/core';\n\nimport KeyPegs from './KeyPegs'\nimport CodePegs from './CodePegs'\nimport ChooseCodePegs from './ChooseCodePegs'\n\nexport default function Board(props) {\n  const { numberOfRows, numberOfPegsInRow, rows, keys, currentRow, currentPeg, colors } = props\n  let board = [];\n\n  for (let i = 0; i < numberOfRows; i++) {\n    board.push(\n      <div key={i}>\n        <ListItem>\n          <ListItemAvatar>\n            <KeyPegs keys={keys} numberOfPegsInRow={numberOfPegsInRow} rowIndex={i} />\n          </ListItemAvatar>\n\n          <CodePegs\n            rows={rows}\n            numberOfPegsInRow={numberOfPegsInRow}\n            rowIndex={i}\n            currentPeg={currentPeg}\n            onChangePeg={props.onChangePeg} />\n\n          {currentRow === i &&\n            <ChooseCodePegs\n              colors={colors}\n              onChooseColor={props.onChooseColor}\n              onSubmit={props.onSubmit} />\n          }\n        </ListItem>\n\n        <Divider />\n      </div>\n    );\n  }\n\n  return (\n    <List>{board}</List>\n  );\n}","import React from 'react';\nimport { Container, AppBar, Typography, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport './App.css';\n\nimport Board from './components/Board'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colors: ['#FFB400', '#FF5A5F', '#8CE071', '#00D1C1', '#007A87', '#7B0051'],\n      numberOfRows: 10,\n      numberOfPegsInRow: 4,\n      codes: [],\n      rows: [],\n      keys: [],\n      currentRow: 0,\n      currentPeg: 0,\n      openDialog: false,\n      dialogTitle: 'Game Over',\n      dialogContentText: 'You have lost!'\n    };\n  }\n\n  _generateRandomCodes = () => {\n    const { colors, numberOfPegsInRow } = this.state;\n    let codes = [];\n\n    for (let i = 0; i < numberOfPegsInRow; i++) {\n      codes.push(colors[Math.floor(Math.random() * colors.length)]);\n    }\n\n    return codes;\n  }\n\n  _initGame = () => {\n    const { numberOfPegsInRow, numberOfRows } = this.state;\n    const length = numberOfRows * numberOfPegsInRow;\n\n    this.setState({\n      codes: this._generateRandomCodes(),\n      rows: Array(length).fill('gray'),\n      keys: Array(length).fill('gray'),\n      currentRow: 0,\n      currentPeg: 0,\n      openDialog: false\n    });\n  }\n\n  componentDidMount() {\n    this._initGame();\n  }\n\n  _onChooseColor = (color) => {\n    const { rows, currentPeg, numberOfPegsInRow } = this.state;\n    let newRows = Array.from(rows);\n    newRows[currentPeg] = color;\n\n    this.setState({ rows: newRows });\n\n    // Only change the current peg when it is not the final peg in row\n    if ((currentPeg + 1) % numberOfPegsInRow !== 0) {\n      this.setState({ currentPeg: currentPeg + 1 });\n    }\n  }\n\n  _onChangePeg = (index) => {\n    const { currentRow, numberOfPegsInRow } = this.state;\n    const startIndex = currentRow * numberOfPegsInRow;\n    const endIndex = startIndex + numberOfPegsInRow;\n\n    if (index >= startIndex && index < endIndex) {\n      this.setState({ currentPeg: index });\n    }\n  }\n\n  _onSubmit = () => {\n    const { currentRow, numberOfRows, numberOfPegsInRow } = this.state;\n    const startIndex = currentRow * numberOfPegsInRow;\n    let newCodes = Array.from(this.state.codes);\n    let newRows = Array.from(this.state.rows);\n    let newKeys = Array.from(this.state.keys);\n    let numberOfBlackPegs = 0;\n    let numberOfWhitePegs = 0;\n\n    // Count black pegs\n    for (let i = 0; i < numberOfPegsInRow; i++) {\n      const index = startIndex + i;\n\n      if (newRows[index] === newCodes[i]) {\n        numberOfBlackPegs++;\n        delete (newRows[index]);\n        delete (newCodes[i]);\n      }\n    }\n\n    // Count white pegs\n    for (let i = 0; i < numberOfPegsInRow; i++) {\n      const index = startIndex + i;\n      const indexOfPeg = newCodes.indexOf(newRows[index])\n\n      if (indexOfPeg !== -1) {\n        numberOfWhitePegs++;\n        delete (newRows[index]);\n        delete (newCodes[indexOfPeg])\n      }\n    }\n\n    if (numberOfBlackPegs === numberOfPegsInRow) {\n      this.setState({\n        openDialog: true,\n        dialogTitle: 'Congratulation',\n        dialogContentText: 'You are the champion!'\n      })\n    } else if (currentRow === numberOfRows - 1) {\n      this.setState({\n        openDialog: true,\n        dialogTitle: 'Game Over',\n        dialogContentText: 'Better luck next time!'\n      })\n    }\n\n    for (let i = 0; i < numberOfBlackPegs; i++) {\n      newKeys[startIndex + i] = 'black';\n    }\n\n    for (let i = numberOfBlackPegs; i < numberOfBlackPegs + numberOfWhitePegs; i++) {\n      newKeys[startIndex + i] = 'white';\n    }\n\n    this.setState({\n      keys: newKeys,\n      currentRow: currentRow + 1,\n      currentPeg: (currentRow + 1) * numberOfPegsInRow\n    });\n  }\n\n  _handleCloseDialog = () => {\n    this.setState({ openDialog: false })\n  }\n\n  _restartGame = () => {\n    this._initGame();\n\n    var body = document.body;\n    var html = document.documentElement;\n    body.scrollTop = 0;\n    html.scrollTop = 0;\n  }\n\n  render() {\n    return (\n      <Container maxWidth=\"sm\">\n        <AppBar color=\"primary\" position=\"static\">\n          <Typography variant=\"h3\" component=\"h1\" align=\"center\">\n            MASTERMIND\n          </Typography>\n        </AppBar>\n\n        <Board\n          {...this.state}\n          onChangePeg={this._onChangePeg}\n          onChooseColor={this._onChooseColor}\n          onSubmit={this._onSubmit} />\n\n        <Dialog\n          open={this.state.openDialog}\n          maxWidth=\"xs\"\n          fullWidth={true}\n          aria-labelledby=\"dialog-title\"\n          aria-describedby=\"dialog-description\"\n        >\n          <DialogTitle id=\"dialog-title\">{this.state.dialogTitle}</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"dialog-description\">\n              {this.state.dialogContentText}\n            </DialogContentText>\n          </DialogContent>\n\n          <DialogActions>\n            <Button onClick={this._restartGame} color=\"primary\" autoFocus>\n              Play Again\n            </Button>\n\n            <Button onClick={this._handleCloseDialog} color=\"primary\">\n              Review Board\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}