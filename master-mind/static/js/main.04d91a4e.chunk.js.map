{"version":3,"sources":["components/KeyPegs.js","components/CodePegs.js","components/ColorPegs.js","components/HiddenPegs.js","components/Board.js","components/dialogs/ResultDialog.js","components/dialogs/IntroDialog.js","App.js","serviceWorker.js","index.js"],"names":["KeyPegs","props","keys","numberOfPegsInRow","rowIndex","gridItem","i","index","push","react_default","a","createElement","Grid","item","xs","key","container","justify","alignItems","CheckCircle","style","color","SwapHorizontalCircle","PanoramaFishEye","maxWidth","margin","CodePegs","rows","currentRow","currentPeg","codePegs","_loop","Lens","fontSize","className","onClick","onChangePeg","ColorPegs","data-intro","data-step","data-disable-interaction","alignContent","colors","map","onChooseColor","Button","variant","size","onSubmit","Check","HiddenPegs","codes","isWin","length","HelpOutline","Board","numberOfRows","onRestartGame","listItems","isCurrentRow","ListItem","disableGutters","hiddenRowIndex","paddingTop","textAlign","VpnKey","Refresh","Paper","concat","List","ResultDialog","openDialog","onCloseDialog","Dialog","open","fullWidth","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","IntroDialog","showIntro","target","href","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_generateRandomCodes","_this$state","state","Math","floor","random","_initGame","_this$state2","setState","Array","fill","openResultDialog","_showIntro","openIntroDialog","introJs","setOption","start","localStorage","setItem","_onChooseColor","_this$state3","newRows","from","_onChangePeg","_this$state4","startIndex","_onSubmit","_this$state5","newCodes","newKeys","numberOfBlackPegs","numberOfWhitePegs","indexOfPeg","indexOf","_onCloseIntroDialog","_onCloseResultDialog","_onRestartGame","body","document","html","documentElement","scrollTop","getItem","Container","marginTop","AppBar","position","Toolbar","justifyContent","Typography","component","assign","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.04d91a4e.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { SwapHorizontalCircle, CheckCircle, PanoramaFishEye } from '@material-ui/icons';\n\nexport default function KeyPegs(props) {\n  const { keys, numberOfPegsInRow, rowIndex } = props;\n  let gridItem = [];\n\n  for (let i = 0; i < props.numberOfPegsInRow; i++) {\n    const index = rowIndex * numberOfPegsInRow + i;\n\n    gridItem.push(\n      <Grid item xs={6} key={i}>\n        <Grid container justify=\"center\" alignItems=\"center\">\n          {keys[index] === 'black' ? (\n            <CheckCircle style={{color: 'green'}} />\n          ) : keys[index] === 'white' ? (\n            <SwapHorizontalCircle style={{color: 'orange'}} />\n          ) : (\n                <PanoramaFishEye />\n              )}\n        </Grid>\n      </Grid >\n    )\n  }\n\n  return (\n    <Grid container style={{ maxWidth: '55px', margin: 'auto' }}>\n      {gridItem}\n    </Grid>\n  );\n}","import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { Lens } from '@material-ui/icons';\n\nimport './Main.css';\n\nexport default function CodePegs(props) {\n  const { numberOfPegsInRow, rows, rowIndex, currentRow, currentPeg } = props;\n  let codePegs = [];\n\n  for (let i = 0; i < numberOfPegsInRow; i++) {\n    const index = rowIndex * numberOfPegsInRow + i;\n\n    codePegs.push(\n      <Lens\n        key={i}\n        fontSize=\"large\"\n        className={index === currentPeg ? \"Code-Peg--active\" : rowIndex === currentRow ? \"Code-Peg\" : \"\"}\n        onClick={() => props.onChangePeg(index)}\n        style={{ color: rows[index] }} />\n    );\n  }\n\n  return (\n    <Grid container justify=\"space-evenly\">\n      {codePegs}\n    </Grid>\n  );\n}","import React from 'react';\nimport { Grid, Button } from '@material-ui/core';\nimport { Lens, Check } from '@material-ui/icons';\n\nimport './Main.css';\n\nexport default function ColorPegs(props) {\n  return (\n    <div\n      className=\"Color-Pegs\"\n      data-intro=\"Choose color here and Submit your guess.\"\n      data-step=\"2\"\n      data-disable-interaction=\"2\"\n    >\n      <Grid container alignContent=\"center\" alignItems=\"center\">\n        {props.colors.map(color =>\n          <Grid item xs={4} key={color}>\n            <Lens\n              className=\"Color-Peg\"\n              fontSize=\"large\"\n              style={{ color: color }}\n              onClick={() => props.onChooseColor(color)} />\n          </Grid>\n        )}\n      </Grid>\n\n      <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={props.onSubmit}>\n        <Check fontSize=\"small\" /> Submit\n      </Button>\n    </div>\n  );\n}","import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { Lens, HelpOutline } from '@material-ui/icons';\n\nimport './Main.css';\n\nexport default function HiddenPegs(props) {\n  const { codes, isWin } = props;\n  let codePegs = [];\n\n  for (let i = 0; i < codes.length; i++) {\n    if (isWin === null) {\n      codePegs.push(\n        <HelpOutline\n          key={i}\n          fontSize=\"large\"\n          style={{ color: '#555555' }} />\n      );\n    } else {\n      codePegs.push(\n        <Lens\n          key={i}\n          fontSize=\"large\"\n          className={isWin ? 'Code-Peg--win' : 'Code-Peg--lose'}\n          style={{ color: codes[i] }} />\n      );\n    }\n  }\n\n  return (\n    <Grid container justify=\"space-evenly\">\n      {codePegs}\n    </Grid>\n  );\n}","import React from 'react';\nimport { Paper, List, ListItem, Grid, Button } from '@material-ui/core';\nimport { VpnKey, Refresh } from '@material-ui/icons';\n\nimport KeyPegs from './KeyPegs';\nimport CodePegs from './CodePegs';\nimport ColorPegs from './ColorPegs';\nimport HiddenPegs from './HiddenPegs';\n\nexport default function Board(props) {\n  const { numberOfRows, numberOfPegsInRow, codes, rows, keys, currentRow, currentPeg, colors, isWin, onRestartGame } = props\n  let listItems = [];\n\n  for (let i = 0; i < numberOfRows; i++) {\n    const isCurrentRow = (currentRow === i);\n\n    listItems.push(\n      <ListItem\n        key={i}\n        disableGutters={true}\n        className={isCurrentRow ? 'Board-Row Board-Row--active' : 'Board-Row'}\n      >\n        <Grid container alignContent=\"center\" alignItems=\"center\">\n          {i === 0 ? (\n            <Grid\n              item xs={2}\n              data-intro=\"Feedback of your guess: Green icon is correct in both color and position, Orange icon is correct color but wrong position.\"\n              data-step=\"4\"\n              data-disable-interaction=\"4\"\n            >\n              <KeyPegs keys={keys} numberOfPegsInRow={numberOfPegsInRow} rowIndex={i} />\n            </Grid>\n          ) : (\n              <Grid item xs={2}>\n                <KeyPegs keys={keys} numberOfPegsInRow={numberOfPegsInRow} rowIndex={i} />\n              </Grid>\n            )}\n\n          {i === 0 ? (\n            <Grid\n              item xs={7}\n              data-intro=\"Your guess in each turn.\"\n              data-step=\"3\"\n              data-disable-interaction=\"3\"\n            >\n              <CodePegs\n                rows={rows}\n                numberOfPegsInRow={numberOfPegsInRow}\n                rowIndex={i}\n                currentRow={currentRow}\n                currentPeg={currentPeg}\n                onChangePeg={props.onChangePeg} />\n            </Grid>\n          ) : (\n              <Grid item xs={7}>\n                <CodePegs\n                  rows={rows}\n                  numberOfPegsInRow={numberOfPegsInRow}\n                  rowIndex={i}\n                  currentRow={currentRow}\n                  currentPeg={currentPeg}\n                  onChangePeg={props.onChangePeg} />\n              </Grid>\n            )}\n\n          <Grid item xs={3}>\n            {isCurrentRow && isWin === null &&\n              <ColorPegs\n                colors={colors}\n                isWin={isWin}\n                onChooseColor={props.onChooseColor}\n                onSubmit={props.onSubmit} />\n            }\n          </Grid>\n        </Grid>\n      </ListItem>\n    );\n  }\n\n  const hiddenRowIndex = numberOfRows + 1\n  listItems.push(\n    <ListItem\n      disableGutters={true}\n      key={hiddenRowIndex}\n      className={'Board-Row'}\n      style={{ paddingTop: '15px' }}\n    >\n      <Grid container alignContent=\"center\" alignItems=\"center\">\n        <Grid item xs={2}>\n          <div style={{textAlign: 'center'}}>\n            <VpnKey className=\"Result-Icon\" />\n          </div>\n        </Grid>\n\n        <Grid\n          item xs={7}\n          data-intro=\"Result of the game, display at the end game.\"\n          data-step=\"5\"\n          data-disable-interaction=\"5\"\n        >\n          <HiddenPegs codes={codes} isWin={isWin} />\n        </Grid>\n\n        <Grid item xs={3}>\n          <Grid container justify=\"center\" alignItems=\"center\">\n            <Button onClick={onRestartGame} color=\"primary\">\n              <Refresh fontSize=\"small\" /> Restart\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n    </ListItem>\n  )\n\n  return (\n    <Paper\n      data-intro={`Try to guess the pattern, in both order and color, within ${numberOfRows} turns.`}\n      data-step=\"1\"\n      data-disable-interaction=\"1\"\n    >\n      <List>{listItems}</List>\n    </Paper>\n  );\n}","import React from 'react';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { Refresh } from '@material-ui/icons';\n\nexport default function ResultDialog(props) {\n  const { openDialog, isWin, onCloseDialog, onRestartGame } = props\n  return (\n    <Dialog\n      open={openDialog}\n      maxWidth=\"xs\"\n      fullWidth={true}\n    >\n      <DialogTitle>\n        {isWin ? 'Congratulation' : 'Game Over'}\n      </DialogTitle>\n\n      <DialogContent>\n        <DialogContentText>\n          {isWin ? (\n            <span>You are the champion!</span>\n          ) : (\n              <span>Better luck next time!</span>\n            )}\n        </DialogContentText>\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={onRestartGame} color=\"primary\" autoFocus>\n          <Refresh fontSize=\"small\" /> Play Again\n        </Button>\n\n        <Button onClick={onCloseDialog} color=\"secondary\">\n          Review Board\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}","import React from 'react';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\n\nexport default function IntroDialog(props) {\n  const { openDialog, onCloseDialog, showIntro } = props\n  return (\n    <Dialog\n      open={openDialog}\n\n    >\n      <DialogTitle>Welcome to the Mastermind Game</DialogTitle>\n\n      <DialogContent>\n        <DialogContentText>\n          If you don't know the rule of the game, please check <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Mastermind_(board_game)\">here</a>!\n        </DialogContentText>\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={onCloseDialog} color=\"primary\">\n          Play Now\n        </Button>\n\n        <Button onClick={showIntro} color=\"secondary\">\n          View Tutorial\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}","import React from 'react';\nimport { Container, AppBar, Toolbar, Typography } from '@material-ui/core';\nimport introJs from 'intro.js';\nimport 'intro.js/minified/introjs.min.css';\n\nimport Board from './components/Board';\nimport ResultDialog from './components/dialogs/ResultDialog';\nimport IntroDialog from './components/dialogs/IntroDialog';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colors: ['#FFB400', '#FF5A5F', '#8CE071', '#00D1C1', '#007A87', '#7B0051'],\n      numberOfRows: 8,\n      numberOfPegsInRow: 4,\n      codes: [],\n      rows: [],\n      keys: [],\n      currentRow: 0,\n      currentPeg: 0,\n      openIntroDialog: false,\n      openResultDialog: false,\n      isWin: null\n    };\n  }\n\n  _generateRandomCodes = () => {\n    const { colors, numberOfPegsInRow } = this.state;\n    let codes = [];\n\n    for (let i = 0; i < numberOfPegsInRow; i++) {\n      codes.push(colors[Math.floor(Math.random() * colors.length)]);\n    }\n\n    return codes;\n  }\n\n  _initGame = () => {\n    const { numberOfPegsInRow, numberOfRows } = this.state;\n    const length = numberOfRows * numberOfPegsInRow;\n\n    this.setState({\n      codes: this._generateRandomCodes(),\n      rows: Array(length).fill('gray'),\n      keys: Array(length).fill('gray'),\n      currentRow: 0,\n      currentPeg: 0,\n      openResultDialog: false,\n      isWin: null\n    });\n  }\n\n  componentDidMount() {\n    this._initGame();\n\n    // Only show intro dialog if it's the first time visiting page\n    const isVisited = localStorage.getItem('isVisited');\n    if (isVisited === 'false') {\n      this.setState({ openIntroDialog: true })\n    }\n  }\n\n  _showIntro = () => {\n    this.setState({ openIntroDialog: false })\n    introJs().setOption('showStepNumbers', false).start();\n    localStorage.setItem('isVisited', 'true');\n  }\n\n  _onChooseColor = (color) => {\n    const { rows, currentPeg, numberOfPegsInRow } = this.state;\n    let newRows = Array.from(rows);\n    newRows[currentPeg] = color;\n\n    this.setState({ rows: newRows });\n\n    // Only change the current peg when it is not the final peg in row\n    if ((currentPeg + 1) % numberOfPegsInRow !== 0) {\n      this.setState({ currentPeg: currentPeg + 1 });\n    }\n  }\n\n  _onChangePeg = (index) => {\n    const { currentRow, numberOfPegsInRow } = this.state;\n    const startIndex = currentRow * numberOfPegsInRow;\n    const endIndex = startIndex + numberOfPegsInRow;\n\n    if (index >= startIndex && index < endIndex) {\n      this.setState({ currentPeg: index });\n    }\n  }\n\n  _onSubmit = () => {\n    const { codes, rows, keys, currentRow, numberOfRows, numberOfPegsInRow } = this.state;\n    const startIndex = currentRow * numberOfPegsInRow;\n    let newCodes = Array.from(codes);\n    let newRows = Array.from(rows);\n    let newKeys = Array.from(keys);\n    let numberOfBlackPegs = 0;\n    let numberOfWhitePegs = 0;\n\n    // Count black pegs\n    for (let i = 0; i < numberOfPegsInRow; i++) {\n      const index = startIndex + i;\n\n      if (newRows[index] === newCodes[i]) {\n        numberOfBlackPegs++;\n        delete (newRows[index]);\n        delete (newCodes[i]);\n      }\n    }\n\n    // Count white pegs\n    for (let i = 0; i < numberOfPegsInRow; i++) {\n      const index = startIndex + i;\n      const indexOfPeg = newCodes.indexOf(newRows[index])\n\n      if (indexOfPeg !== -1) {\n        numberOfWhitePegs++;\n        delete (newRows[index]);\n        delete (newCodes[indexOfPeg])\n      }\n    }\n\n    // Update key pegs\n    for (let i = 0; i < numberOfBlackPegs; i++) {\n      newKeys[startIndex + i] = 'black';\n    }\n    for (let i = numberOfBlackPegs; i < numberOfBlackPegs + numberOfWhitePegs; i++) {\n      newKeys[startIndex + i] = 'white';\n    }\n    this.setState({ keys: newKeys });\n\n    // Check win\n    if (numberOfBlackPegs === numberOfPegsInRow) {\n      this.setState({\n        openResultDialog: true,\n        isWin: true\n      })\n    } else if (currentRow === numberOfRows - 1) {\n      this.setState({\n        openResultDialog: true,\n        isWin: false\n      })\n    } else {\n      this.setState({\n        currentRow: currentRow + 1,\n        currentPeg: (currentRow + 1) * numberOfPegsInRow\n      });\n    }\n  }\n\n  _onCloseIntroDialog = () => {\n    this.setState({ openIntroDialog: false })\n  }\n\n  _onCloseResultDialog = () => {\n    this.setState({ openResultDialog: false })\n  }\n\n  _onRestartGame = () => {\n    this._initGame();\n\n    var body = document.body;\n    var html = document.documentElement;\n    body.scrollTop = 0;\n    html.scrollTop = 0;\n  }\n\n  render() {\n    return (\n      <Container\n        maxWidth=\"sm\"\n        style={{ marginTop: '15px' }}\n      >\n        <AppBar color=\"primary\" position=\"static\">\n          <Toolbar style={{ justifyContent: 'center' }}>\n            <Typography variant=\"h3\" component=\"h1\">\n              MASTERMIND\n          </Typography>\n          </Toolbar>\n        </AppBar>\n\n        <Board\n          {...this.state}\n          onChangePeg={this._onChangePeg}\n          onChooseColor={this._onChooseColor}\n          onSubmit={this._onSubmit}\n          onRestartGame={this._onRestartGame}\n        />\n\n        <ResultDialog\n          openDialog={this.state.openResultDialog}\n          isWin={this.state.isWin}\n          onCloseDialog={this._onCloseResultDialog}\n          onRestartGame={this._onRestartGame} />\n\n        <IntroDialog\n          openDialog={this.state.openIntroDialog}\n          onCloseDialog={this._onCloseIntroDialog}\n          showIntro={this._showIntro} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}