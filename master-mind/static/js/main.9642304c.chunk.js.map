{"version":3,"sources":["components/KeyPegs.js","components/CodePegs.js","components/ChooseCodePegs.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["KeyPegs","props","keys","numberOfPegsInRow","rowIndex","gridItem","i","index","push","react_default","a","createElement","Grid","item","xs","key","container","justify","alignItems","CheckCircleOutline","SwapHorizontalCircleOutlined","PanoramaFishEye","style","maxWidth","margin","CodePegs","rows","currentRow","currentPeg","codePegs","_loop","Lens","fontSize","className","onClick","onChangePeg","color","ChooseCodePegs","Paper","alignContent","colors","map","cursor","onChooseColor","Button","variant","size","onSubmit","Check","Board","numberOfRows","board","ListItem","disableGutters","Divider","List","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_generateRandomCodes","_this$state","state","codes","Math","floor","random","length","_initGame","_this$state2","setState","Array","fill","openDialog","_onChooseColor","_this$state3","newRows","from","_onChangePeg","_this$state4","startIndex","_onSubmit","_this$state5","newCodes","newKeys","numberOfBlackPegs","numberOfWhitePegs","indexOfPeg","indexOf","isWin","_handleCloseDialog","_restartGame","body","document","html","documentElement","scrollTop","Container","AppBar","position","Typography","component","align","assign","Dialog","open","fullWidth","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","Refresh","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sZAIe,SAASA,EAAQC,GAI9B,IAJqC,IAC7BC,EAAsCD,EAAtCC,KAAMC,EAAgCF,EAAhCE,kBAAmBC,EAAaH,EAAbG,SAC7BC,EAAW,GAENC,EAAI,EAAGA,EAAIL,EAAME,kBAAmBG,IAAK,CAChD,IAAMC,EAAQH,EAAWD,EAAoBG,EAE7CD,EAASG,KACPC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,IAAKT,GACrBG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMI,WAAS,EAACC,QAAQ,SAASC,WAAW,UACzB,UAAhBhB,EAAKK,GACJE,EAAAC,EAAAC,cAACQ,EAAA,EAAD,MACkB,UAAhBjB,EAAKK,GACPE,EAAAC,EAAAC,cAACS,EAAA,EAAD,MAEIX,EAAAC,EAAAC,cAACU,EAAA,EAAD,SAOd,OACEZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMI,WAAS,EAACM,MAAO,CAAEC,SAAU,OAAQC,OAAQ,SAChDnB,sBCtBQ,SAASoB,EAASxB,GAI/B,IAJsC,IAC9BE,EAA8DF,EAA9DE,kBAAmBuB,EAA2CzB,EAA3CyB,KAAMtB,EAAqCH,EAArCG,SAAUuB,EAA2B1B,EAA3B0B,WAAYC,EAAe3B,EAAf2B,WACnDC,EAAW,GAFuBC,EAAA,SAI7BxB,GACP,IAAMC,EAAQH,EAAWD,EAAoBG,EAE7CuB,EAASrB,KACPC,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACEhB,IAAKT,EACL0B,SAAS,QACTC,UAAWL,IAAerB,EAAQ,cAAgBH,IAAauB,EAAa,MAAQ,GACpFO,QAAS,kBAAMjC,EAAMkC,YAAY5B,IACjCe,MAAO,CAAEc,MAAOV,EAAKnB,QATlBD,EAAI,EAAGA,EAAIH,EAAmBG,IAAKwB,EAAnCxB,GAaT,OACEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMI,WAAS,EAACC,QAAQ,gBACrBY,wBCnBQ,SAASQ,EAAepC,GACrC,OACEQ,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOL,UAAU,cACfxB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMI,WAAS,EAACuB,aAAa,SAASrB,WAAW,UAC9CjB,EAAMuC,OAAOC,IAAI,SAAAL,GAAK,OACrB3B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,IAAKqB,GACrB3B,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,SAAS,QAAQV,MAAO,CAAEoB,OAAQ,UAAWN,MAAOA,GAASF,QAAS,kBAAMjC,EAAM0C,cAAcP,UAK5G3B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAQC,QAAQ,WAAWC,KAAK,QAAQV,MAAM,UAAUF,QAASjC,EAAM8C,UACrEtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAOhB,SAAS,UADlB,YCVS,SAASiB,EAAMhD,GAI5B,IAJmC,IAC3BiD,EAAgFjD,EAAhFiD,aAAc/C,EAAkEF,EAAlEE,kBAAmBuB,EAA+CzB,EAA/CyB,KAAMxB,EAAyCD,EAAzCC,KAAMyB,EAAmC1B,EAAnC0B,WAAYC,EAAuB3B,EAAvB2B,WAAYY,EAAWvC,EAAXuC,OACzEW,EAAQ,GAEH7C,EAAI,EAAGA,EAAI4C,EAAc5C,IAChC6C,EAAM3C,KACJC,EAAAC,EAAAC,cAAA,OAAKI,IAAKT,GACRG,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAUC,gBAAgB,GACxB5C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMI,WAAS,EAACuB,aAAa,SAASrB,WAAW,UAC/CT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACbL,EAAAC,EAAAC,cAACX,EAAD,CAASE,KAAMA,EAAMC,kBAAmBA,EAAmBC,SAAUE,KAGvEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACbL,EAAAC,EAAAC,cAACc,EAAD,CACEC,KAAMA,EACNvB,kBAAmBA,EACnBC,SAAUE,EACVqB,WAAYA,EACZC,WAAYA,EACZO,YAAalC,EAAMkC,eAGvB1B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACZa,IAAerB,GACdG,EAAAC,EAAAC,cAAC0B,EAAD,CACEG,OAAQA,EACRG,cAAe1C,EAAM0C,cACrBI,SAAU9C,EAAM8C,cAM1BtC,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,QAKN,OACE7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,KAAOJ,OCuJIK,cA/Lb,SAAAA,EAAYvD,GAAO,IAAAwD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM3D,KAeR+D,qBAAuB,WAIrB,IAJ2B,IAAAC,EACWR,EAAKS,MAAnC1B,EADmByB,EACnBzB,OAAQrC,EADW8D,EACX9D,kBACZgE,EAAQ,GAEH7D,EAAI,EAAGA,EAAIH,EAAmBG,IACrC6D,EAAM3D,KAAKgC,EAAO4B,KAAKC,MAAMD,KAAKE,SAAW9B,EAAO+B,UAGtD,OAAOJ,GAxBUV,EA2BnBe,UAAY,WAAM,IAAAC,EAC4BhB,EAAKS,MAAzC/D,EADQsE,EACRtE,kBACFoE,EAFUE,EACWvB,aACG/C,EAE9BsD,EAAKiB,SAAS,CACZP,MAAOV,EAAKO,uBACZtC,KAAMiD,MAAMJ,GAAQK,KAAK,QACzB1E,KAAMyE,MAAMJ,GAAQK,KAAK,QACzBjD,WAAY,EACZC,WAAY,EACZiD,YAAY,KArCGpB,EA6CnBqB,eAAiB,SAAC1C,GAAU,IAAA2C,EACsBtB,EAAKS,MAA7CxC,EADkBqD,EAClBrD,KAAME,EADYmD,EACZnD,WAAYzB,EADA4E,EACA5E,kBACtB6E,EAAUL,MAAMM,KAAKvD,GACzBsD,EAAQpD,GAAcQ,EAEtBqB,EAAKiB,SAAS,CAAEhD,KAAMsD,KAGjBpD,EAAa,GAAKzB,IAAsB,GAC3CsD,EAAKiB,SAAS,CAAE9C,WAAYA,EAAa,KAtD1B6B,EA0DnByB,aAAe,SAAC3E,GAAU,IAAA4E,EACkB1B,EAAKS,MAAvCvC,EADgBwD,EAChBxD,WAAYxB,EADIgF,EACJhF,kBACdiF,EAAazD,EAAaxB,EAG5BI,GAAS6E,GAAc7E,EAFV6E,EAAajF,GAG5BsD,EAAKiB,SAAS,CAAE9C,WAAYrB,KAhEbkD,EAoEnB4B,UAAY,WAUV,IAVgB,IAAAC,EACwC7B,EAAKS,MAArDvC,EADQ2D,EACR3D,WAAYuB,EADJoC,EACIpC,aAAc/C,EADlBmF,EACkBnF,kBAC5BiF,EAAazD,EAAaxB,EAC5BoF,EAAWZ,MAAMM,KAAKxB,EAAKS,MAAMC,OACjCa,EAAUL,MAAMM,KAAKxB,EAAKS,MAAMxC,MAChC8D,EAAUb,MAAMM,KAAKxB,EAAKS,MAAMhE,MAChCuF,EAAoB,EACpBC,EAAoB,EAGfpF,EAAI,EAAGA,EAAIH,EAAmBG,IAAK,CAC1C,IAAMC,EAAQ6E,EAAa9E,EAEvB0E,EAAQzE,KAAWgF,EAASjF,KAC9BmF,WACQT,EAAQzE,UACRgF,EAASjF,IAKrB,IAAK,IAAIA,EAAI,EAAGA,EAAIH,EAAmBG,IAAK,CAC1C,IAAMC,EAAQ6E,EAAa9E,EACrBqF,EAAaJ,EAASK,QAAQZ,EAAQzE,KAExB,IAAhBoF,IACFD,WACQV,EAAQzE,UACRgF,EAASI,IAIjBF,IAAsBtF,EACxBsD,EAAKiB,SAAS,CACZG,YAAY,EACZgB,OAAO,IAEAlE,IAAeuB,EAAe,GACvCO,EAAKiB,SAAS,CACZG,YAAY,EACZgB,OAAO,IAIX,IAAK,IAAIvF,EAAI,EAAGA,EAAImF,EAAmBnF,IACrCkF,EAAQJ,EAAa9E,GAAK,QAG5B,IAAK,IAAIA,EAAImF,EAAmBnF,EAAImF,EAAoBC,EAAmBpF,IACzEkF,EAAQJ,EAAa9E,GAAK,QAG5BmD,EAAKiB,SAAS,CACZxE,KAAMsF,EACN7D,WAAYA,EAAa,EACzBC,YAAaD,EAAa,GAAKxB,KA3HhBsD,EA+HnBqC,mBAAqB,WACnBrC,EAAKiB,SAAS,CAAEG,YAAY,KAhIXpB,EAmInBsC,aAAe,WACbtC,EAAKe,YAEL,IAAIwB,EAAOC,SAASD,KAChBE,EAAOD,SAASE,gBACpBH,EAAKI,UAAY,EACjBF,EAAKE,UAAY,GAvIjB3C,EAAKS,MAAQ,CACX1B,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAChEU,aAAc,EACd/C,kBAAmB,EACnBgE,MAAO,GACPzC,KAAM,GACNxB,KAAM,GACNyB,WAAY,EACZC,WAAY,EACZiD,YAAY,EACZgB,OAAO,GAZQpC,mFA0CjBG,KAAKY,6CAmGL,OACE/D,EAAAC,EAAAC,cAAC0F,EAAA,EAAD,CAAW9E,SAAS,MAClBd,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CAAQlE,MAAM,UAAUmE,SAAS,UAC/B9F,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,CAAY3D,QAAQ,KAAK4D,UAAU,KAAKC,MAAM,UAA9C,eAKFjG,EAAAC,EAAAC,cAACsC,EAADS,OAAAiD,OAAA,GACM/C,KAAKM,MADX,CAEE/B,YAAayB,KAAKsB,aAClBvC,cAAeiB,KAAKkB,eACpB/B,SAAUa,KAAKyB,aAEjB5E,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CACEC,KAAMjD,KAAKM,MAAMW,WACjBtD,SAAS,KACTuF,WAAW,EACXC,kBAAgB,eAChBC,mBAAiB,sBAEjBvG,EAAAC,EAAAC,cAACsG,EAAA,EAAD,CAAaC,GAAG,gBACbtD,KAAKM,MAAM2B,MAAQ,iBAAmB,aAGzCpF,EAAAC,EAAAC,cAACwG,EAAA,EAAD,KACE1G,EAAAC,EAAAC,cAACyG,EAAA,EAAD,CAAmBF,GAAG,sBACnBtD,KAAKM,MAAM2B,MACVpF,EAAAC,EAAAC,cAAA,qCAEEF,EAAAC,EAAAC,cAAA,wCAKRF,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,KACE5G,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAQV,QAAS0B,KAAKmC,aAAc3D,MAAM,UAAUkF,WAAS,GAC3D7G,EAAAC,EAAAC,cAAC4G,EAAA,EAAD,CAASvF,SAAS,UADpB,eAIAvB,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAQV,QAAS0B,KAAKkC,mBAAoB1D,MAAM,aAAhD,0BAtLMoF,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvH,EAAAC,EAAAC,cAACsH,EAAD,MAAShC,SAASiC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9642304c.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { SwapHorizontalCircleOutlined, CheckCircleOutline, PanoramaFishEye } from '@material-ui/icons';\n\nexport default function KeyPegs(props) {\n  const { keys, numberOfPegsInRow, rowIndex } = props;\n  let gridItem = [];\n\n  for (let i = 0; i < props.numberOfPegsInRow; i++) {\n    const index = rowIndex * numberOfPegsInRow + i;\n\n    gridItem.push(\n      <Grid item xs={6} key={i}>\n        <Grid container justify=\"center\" alignItems=\"center\">\n          {keys[index] === 'black' ? (\n            <CheckCircleOutline />\n          ) : keys[index] === 'white' ? (\n            <SwapHorizontalCircleOutlined />\n          ) : (\n                <PanoramaFishEye />\n              )}\n        </Grid>\n      </Grid >\n    )\n  }\n\n  return (\n    <Grid container style={{ maxWidth: '55px', margin: 'auto' }}>\n      {gridItem}\n    </Grid>\n  );\n}","import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { Lens } from '@material-ui/icons';\n\nimport './Main.css';\n\nexport default function CodePegs(props) {\n  const { numberOfPegsInRow, rows, rowIndex, currentRow, currentPeg } = props;\n  let codePegs = [];\n \n  for (let i = 0; i < numberOfPegsInRow; i++) {\n    const index = rowIndex * numberOfPegsInRow + i;\n\n    codePegs.push(\n      <Lens\n        key={i}\n        fontSize=\"large\"\n        className={currentPeg === index ? \"Peg--active\" : rowIndex === currentRow ? \"Peg\" : \"\"}\n        onClick={() => props.onChangePeg(index)}\n        style={{ color: rows[index] }} />\n    );\n  }\n\n  return (\n    <Grid container justify=\"space-evenly\">\n      {codePegs}\n    </Grid>\n  );\n}","import React from 'react';\nimport { Grid, Paper, Button } from '@material-ui/core';\nimport { Lens, Check } from '@material-ui/icons';\n\nimport './Main.css';\n\nexport default function ChooseCodePegs(props) {\n  return (\n    <Paper className=\"Choose-Peg\">\n      <Grid container alignContent=\"center\" alignItems=\"center\">\n        {props.colors.map(color =>\n          <Grid item xs={4} key={color}>\n            <Lens fontSize=\"large\" style={{ cursor: 'pointer', color: color }} onClick={() => props.onChooseColor(color)} />\n          </Grid>\n        )}\n      </Grid>\n\n      <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={props.onSubmit}>\n        <Check fontSize=\"small\" /> Submit\n      </Button>\n    </Paper>\n  );\n}","import React from 'react';\nimport { List, ListItem, Grid, Divider } from '@material-ui/core';\n\nimport KeyPegs from './KeyPegs'\nimport CodePegs from './CodePegs'\nimport ChooseCodePegs from './ChooseCodePegs'\n\nexport default function Board(props) {\n  const { numberOfRows, numberOfPegsInRow, rows, keys, currentRow, currentPeg, colors } = props\n  let board = [];\n\n  for (let i = 0; i < numberOfRows; i++) {\n    board.push(\n      <div key={i}>\n        <ListItem disableGutters={true}>\n          <Grid container alignContent=\"center\" alignItems=\"center\">\n            <Grid item xs={2}>\n              <KeyPegs keys={keys} numberOfPegsInRow={numberOfPegsInRow} rowIndex={i} />\n            </Grid>\n\n            <Grid item xs={7}>\n              <CodePegs\n                rows={rows}\n                numberOfPegsInRow={numberOfPegsInRow}\n                rowIndex={i}\n                currentRow={currentRow}\n                currentPeg={currentPeg}\n                onChangePeg={props.onChangePeg} />\n            </Grid>\n\n            <Grid item xs={3}>\n              {currentRow === i &&\n                <ChooseCodePegs\n                  colors={colors}\n                  onChooseColor={props.onChooseColor}\n                  onSubmit={props.onSubmit} />\n              }\n            </Grid>\n          </Grid>\n        </ListItem>\n\n        <Divider />\n      </div>\n    );\n  }\n\n  return (\n    <List>{board}</List>\n  );\n}","import React from 'react';\nimport { Container, AppBar, Typography, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { Refresh, Mood, MoodBad } from '@material-ui/icons';\n\nimport Board from './components/Board'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colors: ['#FFB400', '#FF5A5F', '#8CE071', '#00D1C1', '#007A87', '#7B0051'],\n      numberOfRows: 8,\n      numberOfPegsInRow: 4,\n      codes: [],\n      rows: [],\n      keys: [],\n      currentRow: 0,\n      currentPeg: 0,\n      openDialog: false,\n      isWin: false\n    };\n  }\n\n  _generateRandomCodes = () => {\n    const { colors, numberOfPegsInRow } = this.state;\n    let codes = [];\n\n    for (let i = 0; i < numberOfPegsInRow; i++) {\n      codes.push(colors[Math.floor(Math.random() * colors.length)]);\n    }\n\n    return codes;\n  }\n\n  _initGame = () => {\n    const { numberOfPegsInRow, numberOfRows } = this.state;\n    const length = numberOfRows * numberOfPegsInRow;\n\n    this.setState({\n      codes: this._generateRandomCodes(),\n      rows: Array(length).fill('gray'),\n      keys: Array(length).fill('gray'),\n      currentRow: 0,\n      currentPeg: 0,\n      openDialog: false\n    });\n  }\n\n  componentDidMount() {\n    this._initGame();\n  }\n\n  _onChooseColor = (color) => {\n    const { rows, currentPeg, numberOfPegsInRow } = this.state;\n    let newRows = Array.from(rows);\n    newRows[currentPeg] = color;\n\n    this.setState({ rows: newRows });\n\n    // Only change the current peg when it is not the final peg in row\n    if ((currentPeg + 1) % numberOfPegsInRow !== 0) {\n      this.setState({ currentPeg: currentPeg + 1 });\n    }\n  }\n\n  _onChangePeg = (index) => {\n    const { currentRow, numberOfPegsInRow } = this.state;\n    const startIndex = currentRow * numberOfPegsInRow;\n    const endIndex = startIndex + numberOfPegsInRow;\n\n    if (index >= startIndex && index < endIndex) {\n      this.setState({ currentPeg: index });\n    }\n  }\n\n  _onSubmit = () => {\n    const { currentRow, numberOfRows, numberOfPegsInRow } = this.state;\n    const startIndex = currentRow * numberOfPegsInRow;\n    let newCodes = Array.from(this.state.codes);\n    let newRows = Array.from(this.state.rows);\n    let newKeys = Array.from(this.state.keys);\n    let numberOfBlackPegs = 0;\n    let numberOfWhitePegs = 0;\n\n    // Count black pegs\n    for (let i = 0; i < numberOfPegsInRow; i++) {\n      const index = startIndex + i;\n\n      if (newRows[index] === newCodes[i]) {\n        numberOfBlackPegs++;\n        delete (newRows[index]);\n        delete (newCodes[i]);\n      }\n    }\n\n    // Count white pegs\n    for (let i = 0; i < numberOfPegsInRow; i++) {\n      const index = startIndex + i;\n      const indexOfPeg = newCodes.indexOf(newRows[index])\n\n      if (indexOfPeg !== -1) {\n        numberOfWhitePegs++;\n        delete (newRows[index]);\n        delete (newCodes[indexOfPeg])\n      }\n    }\n\n    if (numberOfBlackPegs === numberOfPegsInRow) {\n      this.setState({\n        openDialog: true,\n        isWin: true\n      })\n    } else if (currentRow === numberOfRows - 1) {\n      this.setState({\n        openDialog: true,\n        isWin: false\n      })\n    }\n\n    for (let i = 0; i < numberOfBlackPegs; i++) {\n      newKeys[startIndex + i] = 'black';\n    }\n\n    for (let i = numberOfBlackPegs; i < numberOfBlackPegs + numberOfWhitePegs; i++) {\n      newKeys[startIndex + i] = 'white';\n    }\n\n    this.setState({\n      keys: newKeys,\n      currentRow: currentRow + 1,\n      currentPeg: (currentRow + 1) * numberOfPegsInRow\n    });\n  }\n\n  _handleCloseDialog = () => {\n    this.setState({ openDialog: false })\n  }\n\n  _restartGame = () => {\n    this._initGame();\n\n    var body = document.body;\n    var html = document.documentElement;\n    body.scrollTop = 0;\n    html.scrollTop = 0;\n  }\n\n  render() {\n    return (\n      <Container maxWidth=\"sm\">\n        <AppBar color=\"primary\" position=\"static\">\n          <Typography variant=\"h3\" component=\"h1\" align=\"center\">\n            MASTERMIND\n          </Typography>\n        </AppBar>\n\n        <Board\n          {...this.state}\n          onChangePeg={this._onChangePeg}\n          onChooseColor={this._onChooseColor}\n          onSubmit={this._onSubmit} />\n\n        <Dialog\n          open={this.state.openDialog}\n          maxWidth=\"xs\"\n          fullWidth={true}\n          aria-labelledby=\"dialog-title\"\n          aria-describedby=\"dialog-description\"\n        >\n          <DialogTitle id=\"dialog-title\">\n            {this.state.isWin ? 'Congratulation' : 'Game Over'}\n          </DialogTitle>\n\n          <DialogContent>\n            <DialogContentText id=\"dialog-description\">\n              {this.state.isWin ? (\n                <span>You are the champion!</span>\n              ) : (\n                  <span>Better luck next time!</span>\n                )}\n            </DialogContentText>\n          </DialogContent>\n\n          <DialogActions>\n            <Button onClick={this._restartGame} color=\"primary\" autoFocus>\n              <Refresh fontSize=\"small\" /> Play Again\n            </Button>\n\n            <Button onClick={this._handleCloseDialog} color=\"secondary\">\n              Review Board\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}