{"version":3,"sources":["components/KeyPegs.js","components/CodePegs.js","components/ColorPegs.js","components/HiddenPegs.js","components/Board.js","components/ResultDialog.js","App.js","serviceWorker.js","index.js"],"names":["KeyPegs","props","keys","numberOfPegsInRow","rowIndex","gridItem","i","index","push","react_default","a","createElement","Grid","item","xs","key","container","justify","alignItems","CheckCircleOutline","SwapHorizontalCircleOutlined","PanoramaFishEye","style","maxWidth","margin","CodePegs","rows","currentRow","currentPeg","codePegs","_loop","Lens","fontSize","className","onClick","onChangePeg","color","ColorPegs","alignContent","colors","map","onChooseColor","Button","variant","size","onSubmit","Check","HiddenPegs","codes","isWin","length","HelpOutline","Board","numberOfRows","onRestartGame","listItems","isCurrentRow","ListItem","disableGutters","hiddenRowIndex","paddingTop","VpnKey","Refresh","Paper","List","ResultDialog","openDialog","onCloseDialog","Dialog","open","fullWidth","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_generateRandomCodes","_this$state","state","Math","floor","random","_initGame","_this$state2","setState","Array","fill","_onChooseColor","_this$state3","newRows","from","_onChangePeg","_this$state4","startIndex","_onSubmit","_this$state5","newCodes","newKeys","numberOfBlackPegs","numberOfWhitePegs","indexOfPeg","indexOf","_onCloseDialog","_onRestartGame","body","document","html","documentElement","scrollTop","Container","AppBar","position","Typography","component","align","assign","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f9f03c2.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { SwapHorizontalCircleOutlined, CheckCircleOutline, PanoramaFishEye } from '@material-ui/icons';\n\nexport default function KeyPegs(props) {\n  const { keys, numberOfPegsInRow, rowIndex } = props;\n  let gridItem = [];\n\n  for (let i = 0; i < props.numberOfPegsInRow; i++) {\n    const index = rowIndex * numberOfPegsInRow + i;\n\n    gridItem.push(\n      <Grid item xs={6} key={i}>\n        <Grid container justify=\"center\" alignItems=\"center\">\n          {keys[index] === 'black' ? (\n            <CheckCircleOutline />\n          ) : keys[index] === 'white' ? (\n            <SwapHorizontalCircleOutlined />\n          ) : (\n                <PanoramaFishEye />\n              )}\n        </Grid>\n      </Grid >\n    )\n  }\n\n  return (\n    <Grid container style={{ maxWidth: '55px', margin: 'auto' }}>\n      {gridItem}\n    </Grid>\n  );\n}","import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { Lens } from '@material-ui/icons';\n\nimport './Main.css';\n\nexport default function CodePegs(props) {\n  const { numberOfPegsInRow, rows, rowIndex, currentRow, currentPeg } = props;\n  let codePegs = [];\n\n  for (let i = 0; i < numberOfPegsInRow; i++) {\n    const index = rowIndex * numberOfPegsInRow + i;\n\n    codePegs.push(\n      <Lens\n        key={i}\n        fontSize=\"large\"\n        className={index === currentPeg ? \"Code-Peg--active\" : rowIndex === currentRow ? \"Code-Peg\" : \"\"}\n        onClick={() => props.onChangePeg(index)}\n        style={{ color: rows[index] }} />\n    );\n  }\n\n  return (\n    <Grid container justify=\"space-evenly\">\n      {codePegs}\n    </Grid>\n  );\n}","import React from 'react';\nimport { Grid, Button } from '@material-ui/core';\nimport { Lens, Check } from '@material-ui/icons';\n\nimport './Main.css';\n\nexport default function ColorPegs(props) {\n  return (\n    <div className=\"Color-Pegs\">\n      <Grid container alignContent=\"center\" alignItems=\"center\">\n        {props.colors.map(color =>\n          <Grid item xs={4} key={color}>\n            <Lens\n              className=\"Color-Peg\"\n              fontSize=\"large\"\n              style={{ color: color }}\n              onClick={() => props.onChooseColor(color)} />\n          </Grid>\n        )}\n      </Grid>\n\n      <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={props.onSubmit}>\n        <Check fontSize=\"small\" /> Submit\n      </Button>\n    </div>\n  );\n}","import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { Lens, HelpOutline } from '@material-ui/icons';\n\nimport './Main.css';\n\nexport default function HiddenPegs(props) {\n  const { codes, isWin } = props;\n  let codePegs = [];\n\n  for (let i = 0; i < codes.length; i++) {\n    if (isWin === null) {\n      codePegs.push(\n        <HelpOutline\n          key={i}\n          fontSize=\"large\"\n          style={{ color: '#555555' }} />\n      );\n    } else {\n      codePegs.push(\n        <Lens\n          key={i}\n          fontSize=\"large\"\n          className={isWin ? 'Code-Peg--win' : 'Code-Peg--lose'}\n          style={{ color: codes[i] }} />\n      );\n    }\n  }\n\n  return (\n    <Grid container justify=\"space-evenly\">\n      {codePegs}\n    </Grid>\n  );\n}","import React from 'react';\nimport { Paper, List, ListItem, Grid, Button } from '@material-ui/core';\nimport { VpnKey, Refresh } from '@material-ui/icons';\n\nimport KeyPegs from './KeyPegs';\nimport CodePegs from './CodePegs';\nimport ColorPegs from './ColorPegs';\nimport HiddenPegs from './HiddenPegs';\n\nexport default function Board(props) {\n  const { numberOfRows, numberOfPegsInRow, codes, rows, keys, currentRow, currentPeg, colors, isWin, onRestartGame } = props\n  let listItems = [];\n\n  for (let i = 0; i < numberOfRows; i++) {\n    const isCurrentRow = (currentRow === i);\n\n    listItems.push(\n      <ListItem\n        key={i}\n        disableGutters={true}\n        className={isCurrentRow ? 'Board-Row Board-Row--active' : 'Board-Row'}\n      >\n        <Grid container alignContent=\"center\" alignItems=\"center\">\n          <Grid item xs={2}>\n            <KeyPegs keys={keys} numberOfPegsInRow={numberOfPegsInRow} rowIndex={i} />\n          </Grid>\n\n          <Grid item xs={7}>\n            <CodePegs\n              rows={rows}\n              numberOfPegsInRow={numberOfPegsInRow}\n              rowIndex={i}\n              currentRow={currentRow}\n              currentPeg={currentPeg}\n              onChangePeg={props.onChangePeg} />\n          </Grid>\n\n          <Grid item xs={3}>\n            {isCurrentRow && isWin === null &&\n              <ColorPegs\n                colors={colors}\n                isWin={isWin}\n                onChooseColor={props.onChooseColor}\n                onSubmit={props.onSubmit} />\n            }\n          </Grid>\n        </Grid>\n      </ListItem>\n    );\n  }\n\n  const hiddenRowIndex = numberOfRows + 1\n  listItems.push(\n    <ListItem\n      disableGutters={true}\n      key={hiddenRowIndex}\n      className={'Board-Row'}\n      style={{ paddingTop: '15px' }}\n    >\n      <Grid container alignContent=\"center\" alignItems=\"center\">\n        <Grid item xs={2}>\n          <Grid container justify=\"center\" alignItems=\"center\">\n            <VpnKey style={{color: '#6a6a6a'}} />\n          </Grid>\n        </Grid>\n\n        <Grid item xs={7}>\n          <HiddenPegs codes={codes} isWin={isWin} />\n        </Grid>\n\n        <Grid item xs={3}>\n          <Grid container justify=\"center\" alignItems=\"center\">\n            <Button onClick={onRestartGame} color=\"primary\">\n              <Refresh fontSize=\"small\" /> Restart\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n    </ListItem>\n  )\n\n  return (\n    <Paper>\n      <List>{listItems}</List>\n    </Paper>\n  );\n}","import React from 'react';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { Refresh } from '@material-ui/icons';\n\nexport default function ResultDialog(props) {\n  const { openDialog, isWin, onCloseDialog, onRestartGame } = props\n  return (\n    <Dialog\n      open={openDialog}\n      maxWidth=\"xs\"\n      fullWidth={true}\n      aria-labelledby=\"dialog-title\"\n      aria-describedby=\"dialog-description\"\n    >\n      <DialogTitle id=\"dialog-title\">\n        {isWin ? 'Congratulation' : 'Game Over'}\n      </DialogTitle>\n\n      <DialogContent>\n        <DialogContentText id=\"dialog-description\">\n          {isWin ? (\n            <span>You are the champion!</span>\n          ) : (\n              <span>Better luck next time!</span>\n            )}\n        </DialogContentText>\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={onRestartGame} color=\"primary\" autoFocus>\n          <Refresh fontSize=\"small\" /> Play Again\n        </Button>\n\n        <Button onClick={onCloseDialog} color=\"secondary\">\n          Review Board\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}","import React from 'react';\nimport { Container, AppBar, Typography } from '@material-ui/core';\n\nimport Board from './components/Board';\nimport ResultDialog from './components/ResultDialog';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colors: ['#FFB400', '#FF5A5F', '#8CE071', '#00D1C1', '#007A87', '#7B0051'],\n      numberOfRows: 8,\n      numberOfPegsInRow: 4,\n      codes: [],\n      rows: [],\n      keys: [],\n      currentRow: 0,\n      currentPeg: 0,\n      openDialog: false,\n      isWin: null\n    };\n  }\n\n  _generateRandomCodes = () => {\n    const { colors, numberOfPegsInRow } = this.state;\n    let codes = [];\n\n    for (let i = 0; i < numberOfPegsInRow; i++) {\n      codes.push(colors[Math.floor(Math.random() * colors.length)]);\n    }\n\n    return codes;\n  }\n\n  _initGame = () => {\n    const { numberOfPegsInRow, numberOfRows } = this.state;\n    const length = numberOfRows * numberOfPegsInRow;\n\n    this.setState({\n      codes: this._generateRandomCodes(),\n      rows: Array(length).fill('gray'),\n      keys: Array(length).fill('gray'),\n      currentRow: 0,\n      currentPeg: 0,\n      openDialog: false,\n      isWin: null\n    });\n  }\n\n  componentDidMount() {\n    this._initGame();\n  }\n\n  _onChooseColor = (color) => {\n    const { rows, currentPeg, numberOfPegsInRow } = this.state;\n    let newRows = Array.from(rows);\n    newRows[currentPeg] = color;\n\n    this.setState({ rows: newRows });\n\n    // Only change the current peg when it is not the final peg in row\n    if ((currentPeg + 1) % numberOfPegsInRow !== 0) {\n      this.setState({ currentPeg: currentPeg + 1 });\n    }\n  }\n\n  _onChangePeg = (index) => {\n    const { currentRow, numberOfPegsInRow } = this.state;\n    const startIndex = currentRow * numberOfPegsInRow;\n    const endIndex = startIndex + numberOfPegsInRow;\n\n    if (index >= startIndex && index < endIndex) {\n      this.setState({ currentPeg: index });\n    }\n  }\n\n  _onSubmit = () => {\n    const { codes, rows, keys, currentRow, numberOfRows, numberOfPegsInRow } = this.state;\n    const startIndex = currentRow * numberOfPegsInRow;\n    let newCodes = Array.from(codes);\n    let newRows = Array.from(rows);\n    let newKeys = Array.from(keys);\n    let numberOfBlackPegs = 0;\n    let numberOfWhitePegs = 0;\n\n    // Count black pegs\n    for (let i = 0; i < numberOfPegsInRow; i++) {\n      const index = startIndex + i;\n\n      if (newRows[index] === newCodes[i]) {\n        numberOfBlackPegs++;\n        delete (newRows[index]);\n        delete (newCodes[i]);\n      }\n    }\n\n    // Count white pegs\n    for (let i = 0; i < numberOfPegsInRow; i++) {\n      const index = startIndex + i;\n      const indexOfPeg = newCodes.indexOf(newRows[index])\n\n      if (indexOfPeg !== -1) {\n        numberOfWhitePegs++;\n        delete (newRows[index]);\n        delete (newCodes[indexOfPeg])\n      }\n    }\n\n    // Update key pegs\n    for (let i = 0; i < numberOfBlackPegs; i++) {\n      newKeys[startIndex + i] = 'black';\n    }\n    for (let i = numberOfBlackPegs; i < numberOfBlackPegs + numberOfWhitePegs; i++) {\n      newKeys[startIndex + i] = 'white';\n    }\n    this.setState({ keys: newKeys });\n\n    // Check win\n    if (numberOfBlackPegs === numberOfPegsInRow) {\n      this.setState({\n        openDialog: true,\n        isWin: true\n      })\n    } else if (currentRow === numberOfRows - 1) {\n      this.setState({\n        openDialog: true,\n        isWin: false\n      })\n    } else {\n      this.setState({\n        currentRow: currentRow + 1,\n        currentPeg: (currentRow + 1) * numberOfPegsInRow\n      });\n    }\n  }\n\n  _onCloseDialog = () => {\n    this.setState({ openDialog: false })\n  }\n\n  _onRestartGame = () => {\n    this._initGame();\n\n    var body = document.body;\n    var html = document.documentElement;\n    body.scrollTop = 0;\n    html.scrollTop = 0;\n  }\n\n  render() {\n    return (\n      <Container maxWidth=\"sm\">\n        <AppBar color=\"primary\" position=\"static\">\n          <Typography variant=\"h3\" component=\"h1\" align=\"center\">\n            MASTERMIND\n          </Typography>\n        </AppBar>\n\n        <Board\n          {...this.state}\n          onChangePeg={this._onChangePeg}\n          onChooseColor={this._onChooseColor}\n          onSubmit={this._onSubmit}\n          onRestartGame={this._onRestartGame} />\n\n        <ResultDialog\n          openDialog={this.state.openDialog}\n          isWin={this.state.isWin}\n          onCloseDialog={this._onCloseDialog}\n          onRestartGame={this._onRestartGame} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}